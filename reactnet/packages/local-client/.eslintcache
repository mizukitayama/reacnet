[{"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/index.tsx":"1","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/cell-list.tsx":"2","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/index.ts":"3","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/hooks/use-typed-selector.ts":"4","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/add-cell.tsx":"5","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/cell-list-item.tsx":"6","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/cell.ts":"7","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/store.ts":"8","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/hooks/use-actions.ts":"9","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/code-cell.tsx":"10","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/text-editor.tsx":"11","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/action-bar.tsx":"12","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/openai-cell.tsx":"13","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/reducers/index.ts":"14","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/action-creators/index.ts":"15","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/hooks/use-cumulative-code.ts":"16","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/preview.tsx":"17","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/action-bar-icon.tsx":"18","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/code-editor.tsx":"19","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/resizable.tsx":"20","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/reducers/cellsReducers.ts":"21","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/reducers/bundlesReducer.ts":"22","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/action-types/index.ts":"23","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/bundler/index.ts":"24","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/bundler/plugin/unpkg.path.plugin.ts":"25","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/bundler/plugin/fetch-plugin.ts":"26","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/middlewares/persist-middleware.ts":"27","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/api-key-register.tsx":"28"},{"size":797,"mtime":1692620701553,"results":"29","hashOfConfig":"30"},{"size":947,"mtime":1692449911830,"results":"31","hashOfConfig":"30"},{"size":127,"mtime":1692436542878,"results":"32","hashOfConfig":"30"},{"size":219,"mtime":1692436542876,"results":"33","hashOfConfig":"30"},{"size":1321,"mtime":1692436542872,"results":"34","hashOfConfig":"30"},{"size":978,"mtime":1692449884813,"results":"35","hashOfConfig":"30"},{"size":124,"mtime":1692436542878,"results":"36","hashOfConfig":"30"},{"size":284,"mtime":1692447827042,"results":"37","hashOfConfig":"30"},{"size":613,"mtime":1692436542876,"results":"38","hashOfConfig":"30"},{"size":2121,"mtime":1692449958323,"results":"39","hashOfConfig":"30"},{"size":1507,"mtime":1692436542875,"results":"40","hashOfConfig":"30"},{"size":743,"mtime":1692436542872,"results":"41","hashOfConfig":"30"},{"size":5388,"mtime":1692624278732,"results":"42","hashOfConfig":"30"},{"size":299,"mtime":1692436542879,"results":"43","hashOfConfig":"30"},{"size":2428,"mtime":1692447120650,"results":"44","hashOfConfig":"30"},{"size":1328,"mtime":1692437026105,"results":"45","hashOfConfig":"30"},{"size":1410,"mtime":1692436542874,"results":"46","hashOfConfig":"30"},{"size":470,"mtime":1692436542871,"results":"47","hashOfConfig":"30"},{"size":1659,"mtime":1692436542873,"results":"48","hashOfConfig":"30"},{"size":1887,"mtime":1692436542874,"results":"49","hashOfConfig":"30"},{"size":2902,"mtime":1692446613311,"results":"50","hashOfConfig":"30"},{"size":904,"mtime":1692436542878,"results":"51","hashOfConfig":"30"},{"size":384,"mtime":1692446079799,"results":"52","hashOfConfig":"30"},{"size":1166,"mtime":1692436542871,"results":"53","hashOfConfig":"30"},{"size":926,"mtime":1692436542871,"results":"54","hashOfConfig":"30"},{"size":2616,"mtime":1692436542871,"results":"55","hashOfConfig":"30"},{"size":1092,"mtime":1692448335240,"results":"56","hashOfConfig":"30"},{"size":729,"mtime":1692621794837,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},"pfjrl7",{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/index.tsx",["118"],"import \"bulmaswatch/superhero/bulmaswatch.min.css\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport { createRoot } from \"react-dom/client\";\nimport { Helmet } from \"react-helmet\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./state\";\nimport CellList from \"./components/cell-list\";\nimport ApiKeyRegister from \"./components/api-key-register\";\nimport \"./style.css\"\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div>\n        <Helmet>\n          <title>reacnet</title>\n        </Helmet>\n        <div className=\"wrapper\">\n          {/* <ApiKeyRegister /> */}\n          <CellList />\n        </div>\n      </div>\n    </Provider>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement!);\nroot.render(<App />);\n","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/cell-list.tsx",["119"],"import { useTypedSelector } from \"../hooks/use-typed-selector\";\nimport CellListItem from \"./cell-list-item\";\nimport AddCell from \"./add-cell\";\nimport { Fragment, useEffect } from \"react\";\nimport \"./cell-list.css\"\nimport { useActions } from \"../hooks/use-actions\";\n\nconst CellList: React.FC = () => {\n  const cells = useTypedSelector(({ cells: { order, data } }) =>\n    order ? order.map((id) => data[id]) : []\n  );\n\n  const { fetchCells } = useActions()\n\n  useEffect(() => {\n    fetchCells()\n  }, [])\n\n  const renderedCells = cells.map((cell) => (\n    // used Fragment to resolve error\n    <Fragment key={cell.id}>\n      <CellListItem cell={cell} />\n      <AddCell previousCellId={cell.id} />\n    </Fragment>\n  ));\n\n  return (\n    <div className=\"cell-list\">\n      <div className={cells.length === 0 ? \"force-visible\" : \"\"}>\n        <AddCell previousCellId={null} />\n      </div>\n      {renderedCells}\n    </div>\n  );\n};\n\nexport default CellList;\n",["120","121"],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/index.ts",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/hooks/use-typed-selector.ts",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/add-cell.tsx",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/cell-list-item.tsx",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/cell.ts",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/store.ts",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/hooks/use-actions.ts",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/code-cell.tsx",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/text-editor.tsx",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/action-bar.tsx",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/openai-cell.tsx",["122"],"import { useState, ChangeEvent, KeyboardEvent, FormEvent } from \"react\";\nimport axios from \"axios\";\nimport { Cell } from \"../state\";\nimport \"./code-cell.css\";\nimport CodeCell from \"./code-cell\";\nimport \"./openai-cell.css\";\nimport { useActions } from \"../hooks/use-actions\";\n\ninterface CodeCellProps {\n  cell: Cell;\n}\n\nconst AICodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n  const { updateCell } = useActions();\n  const [question, setQuestion] = useState(\"\");\n  const [apiKey, setApiKey] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [apiSetError, setApiSetError] = useState(false);\n  const [apiSetSuccess, setApiSetSuccess] = useState(false);\n  const handleSubmit = async (e: FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setApiSetSuccess(false);\n    const chatGptApi = localStorage.getItem(\"chatGptApi\");\n    if (!chatGptApi) {\n      throw new Error();\n    }\n    await axios\n      .post(\n        \"https://api.openai.com/v1/chat/completions\",\n        {\n          model: \"gpt-3.5-turbo\",\n          messages: [\n            {\n              role: \"user\",\n              content:\n                \"Write a code in React: \" +\n                question +\n                \"\\nIf your code contains export statement or export default statement, then delete them. I will only need a function called App().\",\n            },\n          ],\n        },\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${chatGptApi}`,\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response.data.choices[0].message.content);\n        const codeResult = trimCode(response.data.choices[0].message.content);\n        if (!codeResult) {\n          setIsLoading(false);\n          return null;\n        }\n        const combinedCode = codeResult + \"\\nshow(<App />)\\n\";\n        setIsLoading(false);\n        updateCell(cell.id, combinedCode);\n      })\n      .catch((error) => {\n        console.error(\"An error occurred:\", error.response.data);\n        setIsLoading(false);\n        localStorage.removeItem('chatGptApi')\n      });\n  };\n\n  const trimCode = (response: string) => {\n    const matches = response.match(/```(.*?)```/gs);\n\n    if (matches == null) {\n      return response;\n    }\n    let cleanedString = matches[0].replace(/^(.*?)\\n|```$/gs, \"\");\n    console.log(cleanedString);\n    return cleanedString;\n  };\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  };\n\n  const handleKeyPress = (e: KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      handleSubmit(e as unknown as FormEvent);\n    }\n  };\n\n  const registerApiKey = async (e: KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      setIsLoading(true);\n      await axios\n        .post(\n          \"https://api.openai.com/v1/chat/completions\",\n          {\n            model: \"gpt-3.5-turbo\",\n            messages: [\n              {\n                role: \"user\",\n                content: \"\",\n              },\n            ],\n          },\n          {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: `Bearer ${apiKey}`,\n            },\n          }\n        )\n        .then((response) => {\n          localStorage.setItem(\"chatGptApi\", apiKey);\n          setIsLoading(false);\n          setApiSetError(false);\n          setApiSetSuccess(true);\n        })\n        .catch((error) => {\n          setIsLoading(false);\n          setApiSetError(true);\n          setApiSetSuccess(false);\n        });\n    }\n  };\n\n  const deleteApiKey = () => {\n    setIsLoading(true)\n    localStorage.removeItem('chatGptApi')\n    setIsLoading(false)\n  }\n\n  return (\n    <div>\n      {isLoading ? (\n        <div className=\"progress-wrapper\">\n          <progress className=\"progress is-small is-primary\" max=\"100\">\n            Loading\n          </progress>\n        </div>\n      ) : cell.content ? (\n        <CodeCell cell={cell} />\n      ) : !localStorage.getItem(\"chatGptApi\") ? (\n        <>\n          <div className=\"input-wrapper\">\n            <div className=\"form__group field\">\n              <input\n                placeholder=\"ask something\"\n                className=\"form__field\"\n                type=\"text\"\n                onChange={(e) => {\n                  setApiKey(e.target.value);\n                }}\n                value={apiKey}\n                onKeyPress={registerApiKey}\n              />\n              <label className=\"form__label\">OpenAI API key</label>\n            </div>\n            {apiSetError ? (\n              <div className=\"error-message\">Confirm the openAI API key.</div>\n            ) : (\n              <></>\n            )}\n          </div>\n        </>\n      ) : (\n        <div className=\"input-wrapper\">\n          {apiSetSuccess ? (\n            <div className=\"success-message\">Registered API key.</div>\n          ) : (\n            <></>\n          )}\n          <div className=\"form__group field\">\n            <input\n              placeholder=\"ask something\"\n              className=\"form__field\"\n              type=\"text\"\n              onChange={handleChange}\n              value={question}\n              onKeyPress={handleKeyPress}\n            />\n            <label className=\"form__label\">Ask AI</label>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AICodeCell;\n","/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/reducers/index.ts",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/action-creators/index.ts",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/hooks/use-cumulative-code.ts",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/preview.tsx",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/action-bar-icon.tsx",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/code-editor.tsx",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/resizable.tsx",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/reducers/cellsReducers.ts",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/reducers/bundlesReducer.ts",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/action-types/index.ts",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/bundler/index.ts",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/bundler/plugin/unpkg.path.plugin.ts",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/bundler/plugin/fetch-plugin.ts",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/state/middlewares/persist-middleware.ts",[],"/Users/mizuki/Desktop/git-reactnet/reactnet/packages/local-client/src/components/api-key-register.tsx",["123","124"],{"ruleId":"125","severity":1,"message":"126","line":8,"column":8,"nodeType":"127","messageId":"128","endLine":8,"endColumn":22},{"ruleId":"129","severity":1,"message":"130","line":17,"column":6,"nodeType":"131","endLine":17,"endColumn":8,"suggestions":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"125","severity":1,"message":"137","line":126,"column":9,"nodeType":"127","messageId":"128","endLine":126,"endColumn":21},{"ruleId":"125","severity":1,"message":"138","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"139","line":1,"column":27,"nodeType":"127","messageId":"128","endLine":1,"endColumn":41},"@typescript-eslint/no-unused-vars","'ApiKeyRegister' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCells'. Either include it or remove the dependency array.","ArrayExpression",["140"],"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"'deleteApiKey' is assigned a value but never used.","'Dispatch' is defined but never used.","'SetStateAction' is defined but never used.",{"desc":"143","fix":"144"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [fetchCells]",{"range":"145","text":"146"},[497,499],"[fetchCells]"]